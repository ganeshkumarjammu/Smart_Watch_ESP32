#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "MAX30100_PulseOximeter.h"
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <EEPROM.h>
#include <time.h>

// OLED settings
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// GY-MAX30100 settings
PulseOximeter pox;
#define MAX30100_I2C_ADDRESS 0x57
#define OLED_I2C_ADDRESS 0x3C

// LED
#define LED_PIN 2
bool ledOn = false;

// Measurement variables
const byte RATE_SIZE = 4;
byte rates[RATE_SIZE];
byte rateSpot = 0;
long lastBeat = 0;
float beatsPerMinute;
int beatAvg;
float spO2;
bool presenceDetected = false;
bool lastPresenceState = false;
unsigned long lastPresenceChange = 0;
byte tapCount = 0;
const unsigned long tapWindow = 500;
const unsigned long doubleTapWindow = 1000;
unsigned long lastPresence = 0;
const unsigned long presenceTimeout = 5000;

// Single tap message
bool showMessage = false;
unsigned long messageStart = 0;
const unsigned long messageDuration = 2000;

// Display mode
enum DisplayMode { screen1, PRESENCE };
DisplayMode currentMode = screen1;
DisplayMode preMessageMode = screen1;

// Timing
unsigned long lastUpdate = 0;
const unsigned long updateInterval = 1000;
unsigned long lastTimeUpdate = 0;
const unsigned long timeUpdateInterval = 60000; // 60s
unsigned long lastNtpUpdate = 0;
struct tm currentTimeStruct;
bool timeValid = false;

// WiFi and NTP
const char* ssid = "G";
const char* password = "thinkbig";
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800, 60000); // IST: +5:30
String currentTime = "";
String currentDate = "";
bool wifiConnected = false;

// EEPROM
#define EEPROM_SIZE 19 // 10 bytes date, 8 bytes time
#define DATE_ADDR 0
#define TIME_ADDR 11

// Splash screen
bool splashShown = false;
unsigned long splashStart = 0;
const unsigned long splashDuration = 2000;

// Check I2C devices
byte checkI2CDevices() {
  const byte maxRetries = 3;
  for (byte retry = 1; retry <= maxRetries; retry++) {
    Wire.beginTransmission(MAX30100_I2C_ADDRESS);
    byte error = Wire.endTransmission();
    if (error == 0) {
      Serial.println("GY-MAX30100 detected at 0x57");
      break;
    }
    Serial.print("Attempt ");
    Serial.print(retry);
    Serial.print(": GY-MAX30100 error: ");
    Serial.println(error);
    if (retry == maxRetries) {
      Serial.println("ERROR: GY-MAX30100 failed");
      return 0;
    }
  }

  byte oledAddress = OLED_I2C_ADDRESS;
  Wire.beginTransmission(oledAddress);
  if (Wire.endTransmission() != 0) {
    oledAddress = 0x3D;
    Wire.beginTransmission(oledAddress);
    if (Wire.endTransmission() != 0) {
      Serial.println("ERROR: OLED not detected at 0x3C/0x3D");
      return 0;
    }
    Serial.println("OLED detected at 0x3D");
  } else {
    Serial.println("OLED detected at 0x3C");
  }
  return oledAddress;
}

// Update time and date
void updateTimeDate() {
  wifiConnected = (WiFi.status() == WL_CONNECTED);
  bool ntpUpdated = false;

  if (wifiConnected) {
    if (timeClient.update()) {
      time_t epochTime = timeClient.getEpochTime();
      if (epochTime > 946684800) { // After 2000
        struct tm *ptm = gmtime(&epochTime);
        currentTimeStruct = *ptm;
        timeValid = true;
        ntpUpdated = true;
        lastNtpUpdate = millis();

        char dateStr[11];
        sprintf(dateStr, "%04d-%02d-%02d", ptm->tm_year + 1900, ptm->tm_mon + 1, ptm->tm_mday);
        currentDate = String(dateStr);
        char timeStr[9];
        sprintf(timeStr, "%02d:%02d:%02d", ptm->tm_hour, ptm->tm_min, ptm->tm_sec);
        currentTime = String(timeStr);

        // Check and update EEPROM date
        char eepromDate[11];
        for (byte i = 0; i < 10; i++) {
          eepromDate[i] = EEPROM.read(DATE_ADDR + i);
        }
        eepromDate[10] = '\0';
        if (strcmp(currentDate.c_str(), eepromDate) != 0) {
          Serial.println("Saving date: " + currentDate);
          for (byte i = 0; i < 10; i++) {
            EEPROM.write(DATE_ADDR + i, currentDate[i]);
          }
        }
        // Save time
        Serial.println("Saving time: " + currentTime);
        for (byte i = 0; i < 8; i++) {
          EEPROM.write(TIME_ADDR + i, currentTime[i]);
        }
        EEPROM.commit();
      } else {
        timeValid = false;
      }
    }
  }

  // Update time using millis()
  if (timeValid && millis() - lastTimeUpdate >= timeUpdateInterval) {
    currentTimeStruct.tm_sec += 60;
    mktime(&currentTimeStruct); // Normalize
    char dateStr[11];
    sprintf(dateStr, "%04d-%02d-%02d", currentTimeStruct.tm_year + 1900, currentTimeStruct.tm_mon + 1, currentTimeStruct.tm_mday);
    currentDate = String(dateStr);
    char timeStr[9];
    sprintf(timeStr, "%02d:%02d:%02d", currentTimeStruct.tm_hour, currentTimeStruct.tm_min, currentTimeStruct.tm_sec);
    currentTime = String(timeStr);
    lastTimeUpdate = millis();

    // Save time to EEPROM
    Serial.println("Millis update: Saving time: " + currentTime);
    for (byte i = 0; i < 8; i++) {
      EEPROM.write(TIME_ADDR + i, currentTime[i]);
    }
    EEPROM.commit();
  }

  if (!ntpUpdated) {
    // Load from EEPROM
    char eepromDate[11];
    for (byte i = 0; i < 10; i++) {
      eepromDate[i] = EEPROM.read(DATE_ADDR + i);
    }
    eepromDate[10] = '\0';
    if (strlen(eepromDate) == 10 && eepromDate[4] == '-' && eepromDate[7] == '-') {
      currentDate = String(eepromDate);
    } else {
      currentDate = "N/A";
    }
    char eepromTime[9];
    for (byte i = 0; i < 8; i++) {
      eepromTime[i] = EEPROM.read(TIME_ADDR + i);
    }
    eepromTime[8] = '\0';
    if (strlen(eepromTime) == 8 && eepromTime[2] == ':' && eepromTime[5] == ':') {
      currentTime = String(eepromTime);
      sscanf(eepromTime, "%02d:%02d:%02d", &currentTimeStruct.tm_hour, &currentTimeStruct.tm_min, &currentTimeStruct.tm_sec);
      sscanf(eepromDate, "%04d-%02d-%02d", &currentTimeStruct.tm_year, &currentTimeStruct.tm_mon, &currentTimeStruct.tm_mday);
      currentTimeStruct.tm_year -= 1900;
      currentTimeStruct.tm_mon -= 1;
      timeValid = true;
      lastTimeUpdate = millis();
    } else {
      currentTime = "N/A";
      timeValid = false;
    }
  }
}

// Save time on double tap
void saveTimeToEEPROM() {
  if (timeValid) {
    Serial.println("Double tap: Saving time: " + currentTime);
    for (byte i = 0; i < 8; i++) {
      EEPROM.write(TIME_ADDR + i, currentTime[i]);
    }
    EEPROM.commit();
  }
}

// Read SpO2
void readSpO2() {
  pox.update();
  spO2 = pox.getSpO2();
  if (spO2 < 50 || spO2 > 100) spO2 = 0;
}

// Read presence and taps
void readPresence() {
  bool currentPresence = (pox.getHeartRate() > 30 || pox.getSpO2() > 50);
  if (currentPresence != lastPresenceState) {
    if (millis() - lastPresenceChange < tapWindow) {
      tapCount++;
      if (tapCount == 2) {
        saveTimeToEEPROM();
        tapCount = 0;
        lastPresenceChange = millis();
      }
    } else {
      tapCount = currentPresence ? 1 : 0;
    }
    lastPresenceChange = millis();
    lastPresenceState = currentPresence;
  }

  if (tapCount == 1 && millis() - lastPresenceChange > tapWindow && currentPresence) {
    preMessageMode = currentMode;
    currentMode = (currentMode == screen1) ? PRESENCE : screen1;
    ledOn = !ledOn;
    digitalWrite(LED_PIN, ledOn ? HIGH : LOW);
    showMessage = true;
    messageStart = millis();
    tapCount = 0;
  }

  presenceDetected = currentPresence;
  if (presenceDetected) {
    lastPresence = millis();
  }
}

// Read heart rate
void readHeartRate() {
  pox.update();
  float bpm = pox.getHeartRate();
  if (bpm > 30 && bpm < 200) {
    if (millis() - lastBeat > 300) {
      beatsPerMinute = bpm;
      rates[rateSpot++] = (byte)beatsPerMinute;
      rateSpot %= RATE_SIZE;
      beatAvg = 0;
      for (byte x = 0; x < RATE_SIZE; x++) {
        beatAvg += rates[x];
      }
      beatAvg /= RATE_SIZE;
      lastBeat = millis();
    }
  }
  if (millis() - lastBeat > 5000) {
    beatAvg = 0;
    rateSpot = 0;
    for (byte i = 0; i < RATE_SIZE; i++) {
      rates[i] = 0;
    }
    beatsPerMinute = 0;
    spO2 = 0;
    presenceDetected = false;
  }
}

// Print data
void printData() {
  Serial.print("Instant BPM=");
  Serial.print(beatsPerMinute);
  Serial.print(", Avg BPM=");
  Serial.print(beatAvg);
  Serial.print(", SpO2=");
  Serial.print(spO2);
  Serial.print("%, Presence=");
  Serial.print(presenceDetected ? "Yes" : "No");
  Serial.print(", Date=");
  Serial.print(currentDate);
  Serial.print(", Time=");
  Serial.println(timeValid ? currentTime : "N/A");

  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);

  if (showMessage && millis() - messageStart < messageDuration) {
    display.setTextSize(2);
    display.setCursor(10, 20);
    display.println(F("Hello Buddy"));
  } else if (showMessage) {
    showMessage = false;
    currentMode = preMessageMode;
  } else if (presenceDetected || (millis() - lastPresence < presenceTimeout) || currentMode == PRESENCE) {
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.println(F("BPM SpO2 Mode"));
    display.setTextSize(2);
    display.print(F("BPM:"));
    display.println(beatAvg > 0 ? String(beatAvg) : "N/A");
    display.setTextSize(1);
    display.print(F("Inst:"));
    display.print(beatsPerMinute > 0 ? String((int)beatsPerMinute) : "N/A");
    display.print(F(" SpO2:"));
    display.println(spO2 > 0 ? String((int)spO2) + "%" : "N/A");
    display.print(F("Pres:"));
    display.println(presenceDetected ? F("Yes") : F("No"));
  } else {
    display.setCursor(0, 0);
    display.setTextSize(1);
    display.print(F("Date:"));
    display.println(currentDate);
    if (timeValid) {
      display.print(F("Time:"));
      display.println(currentTime);
    }
    display.print(F("WiFi:"));
    display.println(wifiConnected ? F("Yes") : F("No"));
    display.setTextSize(2);
    display.print(F("BPM:"));
    display.println(beatAvg > 0 ? String(beatAvg) : "N/A");
    display.setTextSize(1);
    display.print(F("Inst:"));
    display.print(beatsPerMinute > 0 ? String((int)beatsPerMinute) : "N/A");
    display.print(F(" Pres:"));
    display.println(presenceDetected ? F("Yes") : F("No"));
  }

  display.display();
}

void setup() {
  Serial.begin(115200);
  Serial.println("Initializing Smart Watch...");

  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);

  EEPROM.begin(EEPROM_SIZE);

  for (byte i = 0; i < RATE_SIZE; i++) {
    rates[i] = 0;
  }

  Wire.begin(21, 22);
  Wire.setClock(100000);

  byte oledAddress = checkI2CDevices();
  if (oledAddress == 0) {
    while (1);
  }

  if (!display.begin(SSD1306_SWITCHCAPVCC, oledAddress)) {
    Serial.println(F("SSD1306 failed"));
    while (1);
  }

  if (!pox.begin()) {
    Serial.println("GY-MAX30100 failed");
    display.clearDisplay();
    display.setCursor(0, 0);
    display.println(F("GY-MAX30100 fail"));
    display.display();
    while (1);
  }
  Serial.println("GY-MAX30100 initialized");
  pox.setIRLedCurrent(MAX30100_LED_CURR_50MA);

  WiFi.begin(ssid, password);
  unsigned long wifiStart = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - wifiStart < 10000) {
  }
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected: " + WiFi.localIP().toString());
    timeClient.begin();
  } else {
    Serial.println("\nWiFi failed");
  }

  updateTimeDate();
}

void loop() {
  if (!splashShown && millis() - splashStart < splashDuration) {
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 20);
    display.println(F("Smart Watch"));
    display.display();
    return;
  } else if (!splashShown) {
    splashShown = true;
  }

  readHeartRate();
  readSpO2();
  readPresence();
  updateTimeDate();

    printData();


  if (WiFi.status() != WL_CONNECTED) {
    WiFi.reconnect();
  }
}